#set(CMAKE_BUILD_TYPE "Release")
set(CMAKE_BUILD_TYPE "Debug")
find_package(Boost 1.36.0 REQUIRED COMPONENTS thread system serialization)
find_package(OpenSSL REQUIRED)

if(Boost_FOUND)
    include_directories(${Boost_INCLUDE_DIRS})
    link_directories(${Boost_LIBRARY_DIRS})
else()
    message(FATAL_ERROR "Cannot find boost library")
endif()

if(OPENSSL_FOUND)
    message(STATUS "Find OpenSSL version: ${OPENSSL_VERSION}")
    if (OPENSSL_VERSION VERSION_LESS "1.1")
        message(FATAL_ERROR "OpenSSL version is less than 1.1")
    endif()
else()
    message(FATAL_ERROR "Cannot find OpenSSL library")
endif()

include_directories(../include)
link_directories(../lib)


set(BOOST_LIB_OBJ boost_thread boost_system boost_serialization tcmalloc)
set(SYSTEM_LIB_OBJ pthread lz4)
set(OPENSSL_OBJ ssl crypto)
set(OUTSIDE_OBJ ${SYSTEM_LIB_OBJ} ${BOOST_LIB_OBJ} ${OPENSSL_OBJ})
set(INSIDE_OBJ chunkingLib compressLib cryptoLib networkLib utilLib)
set(FINAL_OBJ ${OUTSIDE_OBJ} ${INSIDE_OBJ})

set(CMAKE_C_FLAGS_DEBUG "-Wall -g -ggdb") 
set(CMAKE_C_FLAGS_RELEASE "-O3 -Wall")
set(CMAKE_CXX_FLAGS_DEBUG "-Wall -g -ggdb -fsanitize=address -O0 -fno-omit-frame-pointer")
#set(CMAKE_CXX_FLAGS_DEBUG "-Wall -g -ggdb") # for gdb, for valgrind
set(CMAKE_CXX_FLAGS_RELEASE "-O3 -Wall")

SET (CMAKE_C_COMPILER "/usr/bin/clang")
SET (CMAKE_CXX_COMPILER "/usr/bin/clang++")
SET (CMAKE_AR "/usr/bin/llvm-ar")
SET (CMAKE_LINKER "/usr/bin/llvm-ld")
SET (CMAKE_NM "/usr/bin/llvm-nm")
SET (CMAKE_OBJDUMP "/usr/bin/llvm-objdump")
SET (CMAKE_RANLIB "/usr/bin/llvm-ranlib")

add_subdirectory(multhread)
add_subdirectory(network)
add_subdirectory(app)
add_subdirectory(chunking)
add_subdirectory(util)
add_subdirectory(crypto)
add_subdirectory(compression)
